// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  groups        UserGroup[]
  expenses      Expense[]
  trips         Trip[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id        String      @id @default(cuid())
  name      String
  ownerId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  trips     Trip[]
  members   UserGroup[]
}

model Trip {
  id          String    @id @default(cuid())
  name        String
  groupId     String
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  expenses    Expense[]
  createdBy   User      @relation(fields: [createdById], references: [id])
}

model Expense {
  id        String   @id @default(cuid())
  amount    Float
  note      String?
  paidById  String
  tripId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paidBy    User     @relation(fields: [paidById], references: [id])
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model UserGroup {
  id      String @id @default(cuid())
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}
